# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
 - none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: validate
    jobs:
      - job: tf_validate
        steps:
        - task: TerraformInstaller@1
          displayName: Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTask@5
          displayName: Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
            backendAzureRmUseEntraIdForAuthentication: false
            backendServiceArm: 'Azure subscription 1(cd85b600-68f6-46a1-bca4-68945440d2ee)'
            backendAzureRmResourceGroupName: 'terraform-state-rg'
            backendAzureRmStorageAccountName: 'tfdevbackend2024styers'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'dev-terraform.tfstate'
        - task: TerraformTask@5
          displayName: Validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
  
  - stage: Dev_deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs: 
      - job: tf_dev_deploy
        steps:
        - task: TerraformInstaller@1
          displayName: Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTask@5
          displayName: Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
            backendAzureRmUseEntraIdForAuthentication: false
            backendServiceArm: 'Azure subscription 1(cd85b600-68f6-46a1-bca4-68945440d2ee)'
            backendAzureRmResourceGroupName: 'terraform-state-rg'
            backendAzureRmStorageAccountName: 'tfdevbackend2024styers'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'dev-terraform.tfstate'
      
        - task: TerraformTask@5
          displayName: Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
            commandOptions: '--auto-approve'
            environmentServiceNameAzureRM: 'Azure subscription 1(cd85b600-68f6-46a1-bca4-68945440d2ee)'
  
  - stage: Staging_deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs: 
      - job: tf_staging_deploy
        steps:
        - task: TerraformInstaller@1
          displayName: Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTask@5
          displayName: Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/staging'
            backendAzureRmUseEntraIdForAuthentication: false
            backendServiceArm: 'Azure subscription 1(cd85b600-68f6-46a1-bca4-68945440d2ee)'
            backendAzureRmResourceGroupName: 'terraform-state-rg'
            backendAzureRmStorageAccountName: 'tfstagebackend2024styers'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'staging-terraform.tfstate'
      
        - task: TerraformTask@5
          displayName: Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/staging'
            commandOptions: '--auto-approve'
            environmentServiceNameAzureRM: 'Azure subscription 1(cd85b600-68f6-46a1-bca4-68945440d2ee)'
            